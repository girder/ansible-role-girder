---
- name: Create 'admin' User
  girder:
    port: 8080
    user:
      firstName: "John"
      lastName: "Doe"
      login: "admin"
      password: "letmein"
      email: "john.doe@girder.test"
      admin: true
    state: present

- name: Disable user default folders
  girder:
    port: 8080
    username: "admin"
    password: "letmein"
    setting:
      key: "core.user_default_folders"
      value: "none"
  register: ret

- name: Check that user default folders are set to none
  assert:
    that:
      - ret["changed"] == true  # noqa 601
      - ret["gc_return"]["previous_value"] == "public_private"
      - ret["gc_return"]["current_value"] == "none"

- name: Test setting a dict-valued setting (the route table)
  girder:
    port: 8080
    username: "admin"
    password: "letmein"
    setting:
      key: "core.route_table"
      value:
        core_girder: "/girder"
        core_static_root: "/static"

- name: Set multiple settings for email
  girder:
    port: 8080
    username: "admin"
    password: "letmein"
    setting:
      key: "{{ setting_item.key }}"
      value: "{{ setting_item.value }}"
  loop:
    - key: "core.email_from_address"
      value: "girder@girder.test"
    - key: "core.email_host"
      value: "myemailhost"
  loop_control:
    # The playbook already defines an {{ item }} variable
    loop_var: setting_item

- name: Get email settings
  girder:
    port: 8080
    username: "admin"
    password: "letmein"
    get:
      path: "system/setting"
      parameters:
        list: "{{ ['core.email_from_address', 'core.email_host'] | to_json }}"
  register: ret

- name: Check that proper email settings are set
  assert:
    that:
      - ret["gc_return"]["core.email_from_address"] == "girder@girder.test"
      - ret["gc_return"]["core.email_host"] == "myemailhost"
